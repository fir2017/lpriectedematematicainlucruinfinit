 public static int treeHeight( Node n ){
if ( n == null ) return 0;
return 1 + Math.max( treeHeight( n.getLeft() ),
treeHeight( n.getRight() ) );
}


void preorderTraversal( Node root ){
if ( root == null ) return;
root.printValue();
preorderTraversal( root.getLeft() );
preorderTraversal( root.getRight() );
}





void inorderTraversal( Node root ){
if ( root == null ) return;
inorderTraversal( root.getLeft() );
root.printValue();
inorderTraversal( root.getRight() );
}
void postorderTraversal( Node root ){
if ( root == null ) return;
postorderTraversal( root.getLeft() );
postorderTraversal( root.getRight() );
root.printValue();
}






void preorderTraversal( Node root ){
Stack<Node> stack = new Stack<Node>();
stack.push( root );
while( !stack.empty() ){
Node curr = stack.pop();
curr.printValue();
Node n = curr.getRight();
if ( n != null ) stack.push( n );
n = curr.getLeft();
if ( n != null ) stack.push( n );
}
}







Node findLowestCommonAncestor( Node root, int value1, int value2 ){
while ( root != null ){
int value = root.getValue();
if ( value > value1 && value > value2 ){
root = root.getLeft();
} else if ( value < value1 && value < value2 ){
root = root.getRight();
} else {
return root;
}
}
return null; // only if empty tree
}





binary tree 2 heap sort 


public static Node heapifyBinaryTree( Node root ){
int size = traverse( root, 0, null ); // Count nodes
Node[] nodeArray = new Node[size];
traverse( root, 0, nodeArray ); // Load nodes into array
// Sort array of nodes based on their values, using Comparator object
Arrays.sort( nodeArray, new Comparator<Node>(){
@Override public int compare( Node m, Node n ){
int mv = m.getValue(), nv = n.getValue();
return ( mv < nv ? -1 : ( mv == nv ? 0 : 1 ) );
}
});
// Reassign children for each node
for ( int i = 0; i < size; i++ ){
int left = 2*i + 1;
int right = left + 1;
nodeArray[i].setLeft( left >= size ? null : nodeArray[left] );
nodeArray[i].setRight( right >= size ? null : nodeArray[right] );
}
return nodeArray[0]; // Return new root node
}
public static int traverse( Node node, int count, Node[] arr ){
if ( node == null )
return count;
if ( arr != null )
arr[count] = node;
Tree and Graph Problems ❘ 91
count++;
count = traverse( node.getLeft(), count, arr );
count = traverse( node.getRight(), count, arr );
return count;
}




Unbalanced Binary Search Tree


public static Node rotateRight( Node oldRoot ){
Node newRoot = oldRoot.getLeft();
oldRoot.setLeft( newRoot.getRight() );
newRoot.setRight( oldRoot );
return newRoot;
}
An equivalent implementation as a nonstatic method of the Node class is better object-oriented
design:
public Node rotateRight() {
Node newRoot = left;
left = newRoot.right;
newRoot.right = this;
return newRoot;
}





six degree of kb

public class ActorGraphNode{
private String name;
private Set<ActorGraphNode> linkedActors;
public ActorGraphNode( String name ){
94 ❘ CHAPTER 6 Trees and Graphs
this.name = name;
linkedActors = new HashSet<ActorGraphNode>();
}
public void linkCostar( ActorGraphNode costar ){
linkedActors.add( costar );
costar.linkedActors.add( this );
}
}





actorgraph 


private int baconNumber = -1;
public int getBaconNumber() { return baconNumber; }
public void setBaconNumbers(){
if ( name != "Kevin Bacon" )
throw new IllegalArgumentException( "Called on " + name );
baconNumber = 0;
Queue<ActorGraphNode> queue = new LinkedList<ActorGraphNode>();
queue.add( this );
ActorGraphNode current;
while ( (current = queue.poll() ) != null ){
for ( ActorGraphNode n : current.linkedActors ){
if ( -1 == n.baconNumber ){ // if node is unvisited
n.baconNumber = current.baconNumber + 1;
queue.add( n );
}
}
}
}



