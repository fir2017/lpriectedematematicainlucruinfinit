 String s = "";
for ( int i = 0; i < 10; ++i ){
s = s + i + " ";
}
is equivalent to
String s = "";
for ( int i = 0; i < 10; ++i ){
StringBuilder t = new StringBuilder();
t.append( s );
t.append( i );
t.append( " " );
s = t.toString();
}
which would be more efficiently coded as
StringBuilder b = new StringBuilder();
for ( int i = 0; i < 10; ++i ){
b.append( i );
b.append( ' ' );
}
String s = b.toString();




public static Character firstNonRepeated( String str ){
HashMap<Character,Integer> charHash =
new HashMap<Character,Integer>();
int i, length;
Character c;
length = str.length();
// Scan str, building hash table
for (i = 0; i < length; i++) {
c = str.charAt(i);
108 ❘ CHAPTER 7 ArrAys And strings
if (charHash.containsKey(c)) {
// Increment count corresponding to c
charHash.put(c, charHash.get(c) + 1);
} else {
charHash.put(c, 1);
}
}
// Search hash table in order of str
for (i = 0; i < length; i++) {
c = str.charAt(i);
if (charHash.get(c) == 1)
return c;
}
return null;
}






public static String firstNonRepeated( String str ){
HashMap<Integer,Object> charHash = new HashMap<Integer,Object>();
Object seenOnce = new Object(), seenMultiple = new Object();
Object seen;
int i;
final int length = str.length();
// Scan str, building hash table
for (i = 0; i < length; ) { // increment intentionally omitted
final int cp = str.codePointAt(i);
i += Character.charCount(cp); // increment based on code point
seen = charHash.get(cp);
if (seen == null) { // not present
charHash.put(cp, seenOnce);
} else {
if (seen == seenOnce) {
charHash.put(cp, seenMultiple);
}
Array and String Problems ❘ 109
}
}
// Search hash table in order of str
for (i = 0; i < length; ) {
final int cp = str.codePointAt(i);
i += Character.charCount(cp);
if (charHash.get(cp) == seenOnce) {
return new String(Character.toChars(cp));
}
}
return null;
}








public static void removeChars( StringBuilder str, String remove ) {
boolean[] flags = new boolean[128]; // assumes ASCII
int src, dst = 0;
// Set flags for characters to be removed
for (char c: remove.toCharArray()) {
flags[c] = true;
}
// Now loop through all the characters,
// copying only if they aren't flagged
for ( src = 0; src < str.length(); ++src ) {
char c = str.charAt(src);
if ( !flags[ c ] ) {
str.setCharAt( dst++, c );
}
}
str.setLength(dst);
return;
}








bool reverseWords( char str[] ){
char *buffer;
int slen, tokenReadPos, wordReadPos, wordEnd, writePos = 0;
slen = strlen( str );
/* Position of the last character is length - 1 */
tokenReadPos = slen - 1;
buffer = (char *) malloc( slen + 1 );
if ( !buffer )
return false; /* memory allocation failed */
while ( tokenReadPos >= 0 ){
114 ❘ CHAPTER 7 ArrAys And strings
if ( str[tokenReadPos] == ' ' ){ /* Non-word characters */
/* Write character */
buffer[writePos++] = str[tokenReadPos--];
} else { /* Word characters */
/* Store position of end of word */
wordEnd = tokenReadPos;
/* Scan to next non-word character */
while ( tokenReadPos >= 0 && str[tokenReadPos] != ' ' )
tokenReadPos--;
/* tokenReadPos went past the start of the word */
wordReadPos = tokenReadPos + 1;
/* Copy the characters of the word */
while ( wordReadPos <= wordEnd ){
buffer[writePos++] = str[wordReadPos++];
}
}
}
/* null terminate buffer and copy over str */
buffer[writePos] = '\0';
strlcpy( str, buffer, slen + 1 );
free( buffer );
return true; /* reverseWords successful */
}








void wcReverseString( wchar_t str[], int start, int end ){
wchar_t temp;
while ( end > start ){
/* Exchange characters */
temp = str[start];
str[start] = str[end];
str[end] = temp;
/* Move indices towards middle */
start++; end--;
}
}
void wcReverseWords( wchar_t str[] ){
int start = 0, end = 0, length;
length = wcslen(str);
/* Reverse entire string */
wcReverseString(str, start, length - 1);
while ( end < length ){
if ( str[end] != L' ' ){ /* Skip non-word characters */
/* Save position of beginning of word */
start = end;
/* Scan to next non-word character */
while ( end < length && str[end] != L' ' )
end++;
/* Back up to end of word */
end--;
/* Reverse word */
wcReverseString( str, start, end );
}
end++; /* Advance to next token */
}
}








public static int strToInt( String str ){
int i = 0, num = 0;
boolean isNeg = false;
int len = str.length();
if ( str.charAt(0) == '-' ){
isNeg = true;
i = 1;
}
118 ❘ CHAPTER 7 ArrAys And strings
while ( i < len ){
num *= 10;
num += ( str.charAt(i++) - '0' );
}
if ( isNeg )
num = -num;
return num;
}








public static final int MAX_DIGITS = 10;
public static String intToStr( int num ){
int i = 0;
boolean isNeg = false;
/* Buffer big enough for largest int and - sign */
char[] temp = new char[ MAX_DIGITS + 1 ];
/* Check to see if the number is negative */
if ( num < 0 ){
num = -num;
isNeg = true;
}
/* Fill buffer with digit characters in reverse order */
while ( num != 0 ){
temp[i++] = (char)( ( num % 10 ) + '0' );
120 ❘ CHAPTER 7 ArrAys And strings
num /= 10;
}
StringBuilder b = new StringBuilder();
if ( isNeg )
b.append( '-' );
while ( i > 0 ){
b.append( temp[--i] );
}
return b.toString();
}









public static final int MAX_DIGITS = 10;
public static String intToStr( int num ){
int i = 0;
boolean isNeg = false;
/* Buffer big enough for largest int and - sign */
char[] temp = new char[ MAX_DIGITS + 1 ];
/* Check to see if the number is negative */
if ( num < 0 ){
/* Special case to avoid overflow on negation */
if (num == Integer.MIN_VALUE){
return "-2147483648";
}
num = -num;
isNeg = true;
}
/* Fill buffer with digit characters in reverse order */
Array and String Problems ❘ 121
do {
temp[i++] = (char)( ( num % 10 ) + '0' );
num /= 10;
} while ( num != 0 );
StringBuilder b = new StringBuilder();
if ( isNeg )
b.append( '-' );
while ( i > 0 ){
b.append( temp[--i] );
}
return b.toString();
}








// Byte is 10xxxxxx
bool IsTrailing( unsigned char b ) {
return ( b & 0xC0 ) == 0x80; // 0xC0=0b11000000 and 0x80=0b10000000
}
// Byte is 0xxxxxxx
bool IsLeading1( unsigned char b ) {
return ( b & 0x80 ) == 0;
122 ❘ CHAPTER 7 ArrAys And strings
}
// Byte is 110xxxxx
bool IsLeading2( unsigned char b ) {
return ( b & 0xE0 ) == 0xC0; // 0xE0=0b11100000
}
// Byte is 1110xxxx
bool IsLeading3( unsigned char b ) {
return ( b & 0xF0 ) == 0xE0; // 0xF0=0b11110000
}
// Byte is 11110xxx
bool IsLeading4( unsigned char b ) {
return ( b & 0xF8 ) == 0xF0; // 0xF8=0b11111000
}
Using these helper functions you can implement a basic algorithm that checks that each character
starts with the correct bit pattern and skips over the correct number of bytes:
bool ValidateUTF8( const unsigned char* buffer, size_t len ) {
size_t i = 0;
while ( i < len ) {
unsigned char b = buffer[i];
if ( IsLeading1( b ) ) {
i += 1;
} else if ( IsLeading2( b ) ) {
i += 2;
} else if ( IsLeading3( b ) ) {
i += 3;
} else if ( IsLeading4( b ) ) {
i += 4;
} else {
return false;
}
}
return true;
}
This code is incomplete, though, because it doesn’t check that the buffer ends with a complete
UTF-8 character, or that only trailing bytes are in between the leading bytes. You can easily confirm
that problems exist using the following test cases:
// Bad buffer -- 4-byte character chopped off.
const unsigned char badIncompleteString[] = { 0xF0, 0x80, 0x80 };
// Bad buffer -- trailing bytes are missing between characters.
const unsigned char badMissingTrailingBytes[] = { 0xE0, 0x80, 0x00 };






bool ValidateUTF8( const unsigned char* buffer, size_t len ) {
size_t i = 0;
while ( i < len ) {
unsigned char b = buffer[i];
if ( IsLeading1( b ) ) {
i += 1;
} else if ( IsLeading2( b ) ) {
i_+= 2;
} else if ( IsLeading3( b ) ) {
i += 3;
} else if ( IsLeading4( b ) ) {
i += 4;
} else {
return false;
}
}
return ( i == len); // Make sure it doesn't go past the buffer.
}
But that doesn’t really fix the underlying problem with this algorithm, which is that it skips over
entire sequences of bytes without ever checking their validity. To be valid, a leading byte must be
followed by the correct number of trailing bytes, which means tracking how many trailing bytes are
expected and confirming that they are all trailing bytes. Implementing this yields:
bool ValidateUTF8( const unsigned char* buffer, size_t len ) {
int expected = 0; // Expected number of trailing bytes left
for ( size_t i = 0; i < len; ++i ) {
unsigned char b = buffer[i];
if ( IsTrailing( b ) ) {
if ( expected-- > 0 ) continue;
return false;
} else if (expected > 0 ) {
return false;
}
if ( IsLeading1( b ) ) {
expected = 0;
} else if ( IsLeading2( b ) ) {
expected = 1;
} else if ( IsLeading3( b ) ) {
expected = 2;
} else if ( IsLeading4( b ) ) {
expected = 3;
} else {
return false;
}
}
return ( expected == 0 );
}



