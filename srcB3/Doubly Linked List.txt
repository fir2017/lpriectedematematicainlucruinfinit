 
 
 
 public void insertInFront( ListElement<Integer> list, int data ){
ListElement<Integer> l = new ListElement<Integer>( data );
l.setNext( list );
}




public ListElement<Integer> insertInFront( ListElement<Integer> list, int data ){
ListElement<Integer> l = new ListElement<Integer>( data );
l.setNext( list );
return l;
}
The caller updates its reference to the head element accordingly:
int data = ....; // data to insert
ListElement<Integer> head = ....; // reference to head
head = insertInFront( head, data );





bool insertInFront( IntElement *head, int data ){
IntElement *newElem = malloc( sizeof(IntElement) );
if ( !newElem ) return false;
newElem->data = data;
newElem->next = head;
head = newElem; // Incorrect! Updates only the local head pointer
return true;
}
The preceding code is incorrect because it updates only the local copy of the head pointer. The cor-
rect version passes in a pointer to the head pointer:
bool insertInFront( IntElement **head, int data ){
IntElement *newElem = malloc( sizeof(IntElement) );
if ( !newElem ) return false;
newElem->data = data;
newElem->next = *head;
*head = newElem;
return true;
}







public ListElement<Integer> find( ListElement<Integer> head, int data ){
ListElement<Integer> elem = head;
while ( elem.value() != data ){
elem = elem.next();
}
return elem;
}
This method works fine as long as the data to find is actually in the list. If it isnâ€™t, an error occurs (a
null reference exception) when you travel past the last element. A simple change to the loop fixes the
problem:
public ListElement<Integer> find( ListElement<Integer> head, int data ){
ListElement<Integer> elem = head;
while ( elem != null && elem.value() != data ){
elem = elem.next();
}
return elem;
}






bool deleteElement( IntElement **head, IntElement *deleteMe )
{
IntElement *elem;
if (!head || !*head || !deleteMe ) /* Check for null pointers */
return false;
elem = *head;
if ( deleteMe == *head ){ /* special case for head */
*head = elem->next;
free(deleteMe);
return true;
}
while ( elem ){
if ( elem->next == deleteMe ){
/* elem is element preceding deleteMe */
elem->next = deleteMe->next;
free(deleteMe);
return true;
}
elem = elem->next;
}
/* deleteMe not found */
return false;
}







bool deleteElement( IntElement **npp, IntElement *deleteMe ){
if (!npp || !*npp || !deleteMe ) /* Check for null pointers */
return false;
while (*npp) {
if( *npp == deleteMe ){
/* npp points to head pointer (if deleteMe is first element)
or to next pointer within preceding element */
*npp = deleteMe->next;
free(deleteMe);
return true;
}
npp = &((*npp)->next);
}
/* deleteMe not found */
return false;
}






void deleteList( IntElement **head )
{
IntElement *deleteMe = *head;
while ( deleteMe ){
IntElement *next = deleteMe->next;
free(deleteMe);
deleteMe = next;
}
*head = NULL;
}



