 
 
 public class Account {
int userNumber;
String userLastName;
String userFirstName;
double userBalance;
public boolean deposit( double amount ){
double newBalance;
if ( amount < 0.0 ){
return false; /* Can't deposit negative amount */
} else {
newBalance = userBalance + amount;
userBalance = newBalance;
return true;
}
}
public boolean withdraw( double amount ){
double newBalance;
if ( amount < 0.0 || amount > userBalance ){
return false; /* Negative withdrawal or insufficient funds */
} else {
newBalance = userBalance - amount;
userBalance = newBalance;
return true;
}
}
}




public class Account {
int userNumber;
String userLastName;
String userFirstName;
double userBalance;
public synchronized boolean deposit( double amount ){
double newBalance;
if ( amount < 0.0 ){
return false; /* Can't deposit negative amount */
} else {
newBalance = userBalance + amount;
userBalance = newBalance;
return true;
}
}
public synchronized boolean withdraw( double amount ){
double newBalance;
if ( amount < 0.0 || amount > userBalance ){
return false; /* Negative withdrawal or insufficient funds */
} else {
newBalance = userBalance – amount;
userBalance = newBalance;
return true;
}
}
}





public class Account {
int userNumber;
String userLastName;
String userFirstName;
double userBalance;
public boolean deposit( double amount ){
double newBalance;
if ( amount < 0.0 ){
return false; /* Can't deposit negative amount */
} else {
synchronized( this ){
newBalance = userBalance + amount;
userBalance = newBalance;
}
return true;
}
}
public boolean withdraw( double amount ){
double newBalance;
170 ❘ CHAPTER 10 ConCurrenCy
synchronized( this ){
if ( amount < 0.0 || amount > userBalance ){
return false;
} else {
newBalance = userBalance - amount;
userBalance = newBalance;
return true;
}
}
}
}
In fact, in Java a synchronized method such as:
synchronized void someMethod(){
.... // the code to protect
}
is exactly equivalent to:
void someMethod(){
synchronized( this ){
.... // the code to protect
}
}
The lock statement in C# can be used in a similar manner, but only within a method:
void someMethod(){
lock( this ){
.... // the code to protect
}
}






Thread task = new TheTask();
task.start();
while ( task.isAlive() ){
; // do nothing
}






Object theLock = new Object();
synchronized( theLock ){
Thread task = new TheTask( theLock );
task.start();
try {
theLock.wait();
}
catch( InterruptedException e ){
.... // do something if interrupted
}
}
.....
class TheTask extends Thread {
private Object theLock;
public TheTask( Object theLock ){
this.theLock = theLock;
}
public void run(){
synchronized( theLock ){
.... // do the task
theLock.notify();
}
}
}






Thread task = new TheTask();
synchronized( task ){
task.start();
try {
task.wait();
}
catch( InterruptedException e ){
.... // do something if interrupted
}
}
.....
class TheTask extends Thread {
public void run(){
synchronized( this ){
.... // do the task
this.notify();
}
}
}






public class IntBuffer {
private int index;
private int[] buffer = new int[8];
public void add( int num ){
while ( true ){
if ( index < buffer.length ){
buffer[index++] = num;
return;
}
}
}
public int remove(){
while ( true ){
if ( index > 0 ){
return buffer[--index];
}
}
}
}
The producer and consumer are almost trivial:
public class Producer extends Thread {
private IntBuffer buffer;
public Producer( IntBuffer buffer ){
this.buffer = buffer;
}
public void run(){
Random r = new Random();
while ( true ){
int num = r.nextInt();
buffer.add( num );
System.out.println( "Produced " + num );
}
}
}
public class Consumer extends Thread {
private IntBuffer buffer;
public Consumer( IntBuffer buffer ){
this.buffer = buffer;
}
public void run(){
while ( true ){
int num = buffer.remove();
System.out.println( "Consumed " + num );
}
}
}
174 ❘ CHAPTER 10 ConCurrenCy
Then, somewhere in the code you start the threads:
IntBuffer b = new IntBuffer();
Producer p = new Producer( b );
Consumer c = new Consumer( b );
p.start();
c.start();
This approach has two problems, however. First, it uses busy waiting, which wastes a lot of CPU
time. Second, there is no access control for the shared resource, the buffer. If a context switch
occurs as the index is being updated, the next thread may read from or write to the wrong element
of the buffer.
You may think at first that making the add and remove methods synchronized fixes the problem:
public class IntBuffer {
private int index;
private int[] buffer = new int[8];
public synchronized void add( int num ){
while ( true ){
if ( index < buffer.length ){
buffer[index++] = num;
return;
}
}
}
public synchronized int remove(){
while ( true ){
if ( index > 0 ){
return buffer[--index];
}
}
}
}




public class IntBuffer {
private int index;
private int[] buffer = new int[8];
public synchronized void add( int num ){
while ( index == buffer.length ){
try {
wait();
}
catch( InterruptedException e ){
}
}
Concurrency Problems ❘ 175
buffer[index++] = num;
notifyAll();
}
public synchronized int remove(){
while ( index == 0 ){
try {
wait();
}
catch( InterruptedException e ){
}
}
int ret = buffer[--index];
notifyAll();
return ret;
}
}





















public class DiningPhilosophers {
// Each "fork" is just an Object we synchronize on
private Object[] forks;
private Philosopher[] philosophers;
// Prepare the forks and philosophers
private DiningPhilosophers( int num ){
176 ❘ CHAPTER 10 ConCurrenCy
forks = new Object[ num ];
philosophers = new Philosopher[ num ];
for ( int i = 0; i < num; ++i ){
forks[i] = new Object();
philosophers[i] = new Philosopher( i, i, ( i + 1 ) % num );
}
}
// Start the eating process
public void startEating() throws InterruptedException {
for ( int i = 0; i < philosophers.length; ++i ){
philosophers[i].start();
}
// Suspend the main thread until the first philosopher
// stops eating, which will never happen — this keeps
// the simulation running indefinitely
philosophers[0].join();
}
// Each philosopher runs in its own thread.
private class Philosopher extends Thread {
private int id;
private int fork1;
private int fork2;
Philosopher( int id, int fork1, int fork2 ){
this.id = id;
this.fork1 = fork1;
this.fork2 = fork2;
}
public void run() {
status( "Ready to eat using forks " + fork1 +
" and " + fork2 );
while ( true ){
status( "Picking up fork " + fork1 );
synchronized( forks[ fork1 ] ){
status( "Picking up fork " + fork2 );
synchronized( forks[ fork2 ] ){
status( "Eating" );
}
}
}
}
private void status( String msg ){
System.out.println( "Philosopher " + id +
": " + msg );
}
}
// Entry point for simulation
public static void main( String[] args ){
try {
DiningPhilosophers d = new DiningPhilosophers( 5 );
d.startEating();
}
catch ( InterruptedException e ){
}
}
}













// Prepare the forks and philosophers
private DiningPhilosophers( int num ){
forks = new Object[ num ];
philosophers = new Philosopher[ num ];
for ( int i = 0; i < num; ++i ){
forks[i] = new Object();
int fork1 = i;
178 ❘ CHAPTER 10 ConCurrenCy
int fork2 = ( i + 1 ) % num;
if ( fork2 < fork1 ){
philosophers[i] = new Philosopher( i, fork2, fork1 );
} else {
philosophers[i] = new Philosopher( i, fork1, fork2 );
}
}
}














// Prepare the forks and philosophers
private DiningPhilosophers( int num ){
forks = new Object[ num ];
philosophers = new Philosopher[ num ];
for ( int i = 0; i < num; ++i ){
forks[i] = new Object();
int fork1 = i;
int fork2 = ( i + 1 ) % num;
if ( ( i % 2 ) == 0 ){
philosophers[i] = new Philosopher( i, fork2, fork1 );
} else {
philosophers[i] = new Philosopher( i, fork1, fork2 );
}
}
}


