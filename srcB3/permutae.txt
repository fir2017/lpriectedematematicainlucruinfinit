 public class Permutations {
private boolean[] used;
private StringBuilder out = new StringBuilder();
private final String in;
public Permutations( final String str ){
in = str;
used = new boolean[ in.length() ];
}
public void permute(){
if ( out.length() == in.length() ){
System.out.println( out );
return;
}
for ( int i = 0; i < in.length(); ++i ){
if ( used[i] ) continue;
out.append( in.charAt(i) );
used[i] = true;
permute();
used[i] = false;
out.setLength( out.length() - 1 );
}
}
}




public class Combinations {
private StringBuilder out = new StringBuilder();
private final String in;
public Combinations( final String str ){ in = str; }
public void combine() { combine( 0 ); }
private void combine( int start ){
for ( int i = start; i < in.length(); ++i ){
out.append( in.charAt( i ) );
System.out.println( out );
if ( i < in.length() )
combine( i + 1 );
out.setLength( out.length() - 1 );
}
}
}


